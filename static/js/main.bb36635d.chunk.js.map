{"version":3,"sources":["Assets/duckmagnifyspeech-trans.png","Utils/pdfUtils.ts","Components/DragAndDrop.tsx","Components/PdfEmptyState/index.tsx","Containers/PdfContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","loadPdfText","base64pdf","pdfTextCallback","parsedPdf","base64ToArrayBuffer","pdfJs","promise","then","pdf","setTextForAllPdfPages","pagesPromises","i","numPages","push","getPageText","Promise","all","pagesText","finalPdfText","length","pageNum","resolve","reject","a","getPage","pdfPage","getTextContent","textContent","textItems","items","str","base64","Uint8Array","from","atob","c","charCodeAt","getFileExtension","fileName","split","pop","stripPrefixFromBase64String","base64String","base64Index","indexOf","substr","DragAndDrop","props","dropRef","React","createRef","useState","isDragging","setIsDragging","depthOfNestedCalls","setDepthOfNestedCalls","useEffect","div","current","addEventListener","handleDragIn","handleDragOut","handleDragOver","handleDrop","removeEventListener","e","preventDefault","stopPropagation","dataTransfer","files","clearData","ref","style","display","position","border","backgroundColor","top","bottom","left","right","zIndex","textAlign","color","fontSize","children","PdfEmptyState","className","src","emptyPdfTextImg","alt","workerSrc","PdfContainer","pdfText","setPdfText","clearPdfText","uploadPdf","uploadedFiles","name","fileExtension","toLowerCase","isValidPdf","alert","reader","FileReader","file","onload","fileLoadedEvent","text","target","result","readAsDataURL","type","onChange","currentTarget","contentEditable","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb36635d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/duckmagnifyspeech-trans.8ffacabc.png\";","import * as pdfJs from 'pdfjs-dist';\r\n\r\nconst BASE64_PREFIX = ';base64,';\r\n\r\nexport const loadPdfText = (\r\n  base64pdf: string,\r\n  pdfTextCallback: (finalPdfText: string) => any\r\n) => {\r\n  const parsedPdf = base64ToArrayBuffer(base64pdf);\r\n  const pdfLoader = pdfJs.getDocument(parsedPdf).promise;\r\n\r\n  pdfLoader.then((pdf) => {\r\n    setTextForAllPdfPages(pdf, pdfTextCallback);\r\n  });\r\n};\r\n\r\nconst setTextForAllPdfPages = (\r\n  pdf: pdfJs.PDFDocumentProxy,\r\n  pdfTextCallback: (finalPdfText: string) => any\r\n) => {\r\n  const pagesPromises = [];\r\n\r\n  for (let i = 0; i < pdf.numPages; i++) {\r\n    pagesPromises.push(getPageText(i + 1, pdf));\r\n  }\r\n\r\n  Promise.all(pagesPromises).then((pagesText) => {\r\n    let finalPdfText = '';\r\n    for (let i = 0; i < pagesText.length; i++) {\r\n      finalPdfText += pagesText[i];\r\n    }\r\n\r\n    pdfTextCallback(finalPdfText);\r\n  });\r\n};\r\n\r\nconst getPageText = (pageNum: number, pdf: pdfJs.PDFDocumentProxy) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const pdfPage = await pdf.getPage(pageNum);\r\n    const textContent = await pdfPage.getTextContent();\r\n    const textItems = textContent.items;\r\n    let finalPdfText = '';\r\n\r\n    for (let i = 0; i < textItems.length; i++) {\r\n      finalPdfText += textItems[i].str;\r\n    }\r\n\r\n    resolve(finalPdfText);\r\n  });\r\n};\r\n\r\nconst base64ToArrayBuffer = (base64: string) => {\r\n  return Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\r\n};\r\n\r\nexport const isValidPdf = (uploadedFiles: FileList | null) => {\r\n  const fileExists = uploadedFiles && uploadedFiles.length > 0;\r\n\r\n  if (!fileExists) {\r\n    return false;\r\n  }\r\n\r\n  const fileName = uploadedFiles![0].name;\r\n  const fileExtension = getFileExtension(fileName);\r\n  return fileExtension?.toLowerCase() === 'pdf';\r\n};\r\n\r\nconst getFileExtension = (fileName: string) => {\r\n  return fileName.split('.').pop();\r\n};\r\n\r\nexport const stripPrefixFromBase64String = (base64String: string) => {\r\n  const base64Index =\r\n    base64String.indexOf(BASE64_PREFIX) + BASE64_PREFIX.length;\r\n  return base64String.substr(base64Index);\r\n};\r\n","import React from 'react';\r\n\r\ninterface DragAndDropProps {\r\n  children: React.ReactNode;\r\n  handleDrop: (files: FileList) => void;\r\n}\r\n\r\nexport const DragAndDrop = (props: DragAndDropProps) => {\r\n  const dropRef = React.createRef<HTMLDivElement>();\r\n  const [isDragging, setIsDragging] = React.useState(false);\r\n  const [depthOfNestedCalls, setDepthOfNestedCalls] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    const div = dropRef.current;\r\n    div?.addEventListener('dragenter', handleDragIn);\r\n    div?.addEventListener('dragleave', handleDragOut);\r\n    div?.addEventListener('dragover', handleDragOver);\r\n    div?.addEventListener('drop', handleDrop);\r\n\r\n    return function cleanUp() {\r\n      div?.removeEventListener('dragenter', handleDragIn);\r\n      div?.removeEventListener('dragleave', handleDragOut);\r\n      div?.removeEventListener('dragover', handleDragOver);\r\n      div?.removeEventListener('drop', handleDrop);\r\n    };\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (depthOfNestedCalls === 0) {\r\n      setIsDragging(false);\r\n    }\r\n  }, [depthOfNestedCalls]);\r\n\r\n  const handleDragIn = (e: DragEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    setDepthOfNestedCalls(depthOfNestedCalls + 1);\r\n\r\n    if (e.dataTransfer?.items && e.dataTransfer?.items.length > 0) {\r\n      setIsDragging(true);\r\n    }\r\n  };\r\n\r\n  const handleDragOut = (e: DragEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    setDepthOfNestedCalls(depthOfNestedCalls - 1);\r\n  };\r\n\r\n  const handleDragOver = (e: DragEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n\r\n  const handleDrop = (e: DragEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    setIsDragging(false);\r\n\r\n    if (e.dataTransfer?.files && e.dataTransfer?.files.length > 0) {\r\n      props.handleDrop(e.dataTransfer.files);\r\n      e.dataTransfer.clearData();\r\n      setDepthOfNestedCalls(0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={dropRef}\r\n      style={{ display: 'inline-block', position: 'relative' }}\r\n    >\r\n      {isDragging && (\r\n        <div\r\n          style={{\r\n            border: 'dashed grey 4px',\r\n            backgroundColor: 'rgba(255,255,255,.8)',\r\n            position: 'absolute',\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            zIndex: 9999,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              position: 'absolute',\r\n              top: '50%',\r\n              right: 0,\r\n              left: 0,\r\n              textAlign: 'center',\r\n              color: 'grey',\r\n              fontSize: 36,\r\n            }}\r\n          >\r\n            <div>drop here~</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport emptyPdfTextImg from '../../Assets/duckmagnifyspeech-trans.png';\r\n\r\nexport const PdfEmptyState = () => (\r\n  <>\r\n    <h2 className=\"empty-pdf-text__header\">\r\n      Your PDF will show up as text here\r\n    </h2>\r\n    <img src={emptyPdfTextImg} alt=\"duck\" />\r\n  </>\r\n);\r\n","import React from 'react';\r\nimport './PdfContainer.css';\r\nimport * as pdfJs from 'pdfjs-dist';\r\nimport {\r\n  isValidPdf,\r\n  loadPdfText,\r\n  stripPrefixFromBase64String,\r\n} from '../Utils/pdfUtils';\r\nimport { DragAndDrop } from '../Components/DragAndDrop';\r\nimport { PdfEmptyState } from '../Components/PdfEmptyState';\r\n\r\npdfJs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfJs.version}/pdf.worker.js`;\r\n\r\nexport const PdfContainer = () => {\r\n  const [pdfText, setPdfText] = React.useState('');\r\n\r\n  const clearPdfText = () => {\r\n    setPdfText('');\r\n  };\r\n\r\n  const handleNativeFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    uploadPdf(e.currentTarget.files);\r\n  };\r\n\r\n  const uploadPdf = (files: FileList | null) => {\r\n    if (!files || files.length <= 0) {\r\n      clearPdfText();\r\n      return;\r\n    }\r\n\r\n    if (!isValidPdf(files)) {\r\n      alert('Invalid file extension: Only .pdf files are supported');\r\n      clearPdfText();\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    const file = files[0];\r\n\r\n    reader.onload = async (fileLoadedEvent: ProgressEvent<FileReader>) => {\r\n      const text = fileLoadedEvent.target?.result;\r\n\r\n      if (typeof text === 'string') {\r\n        const base64String = stripPrefixFromBase64String(text);\r\n        loadPdfText(base64String, setPdfText);\r\n      }\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pdf-container\">\r\n      <DragAndDrop handleDrop={uploadPdf}>\r\n        <div className=\"drag-and-drop__child-container\">\r\n          Drag your PDF file here to convert it to text!\r\n        </div>\r\n      </DragAndDrop>\r\n\r\n      <div className=\"pdf-uploader\">\r\n        <input\r\n          type=\"file\"\r\n          name=\"pdfUploader\"\r\n          onChange={handleNativeFileUpload}\r\n        />\r\n      </div>\r\n      <DragAndDrop handleDrop={uploadPdf}>\r\n        <div className=\"pdf-text\" contentEditable={true}>\r\n          {pdfText ? pdfText : <PdfEmptyState />}\r\n        </div>\r\n      </DragAndDrop>\r\n      <div className=\"clear-pdf-btn\" onClick={clearPdfText}>\r\n        Clear PDF\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { PdfContainer } from './Containers/PdfContainer';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\">Search a PDF</h1>\n      <PdfContainer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}